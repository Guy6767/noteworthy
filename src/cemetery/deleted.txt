*** link ***

link = () => {

    const editorState = this.state.editorState;
    const selection = editorState.getSelection();
    const link = window.prompt('Paste the link -');

    if (!link) {
      this.onChange(RichUtils.toggleLink(editorState, selection, null));
      return 'handled';
    }

    const content = editorState.getCurrentContent();
    const contentWithEntity = content.createEntity('LINK', 'MUTABLE', { url: link });
    const newEditorState = EditorState.push(editorState, contentWithEntity, 'create-entity');
    const entityKey = contentWithEntity.getLastCreatedEntityKey();
    this.onChange(RichUtils.toggleLink(newEditorState, selection, entityKey));
  }


*** adding a format option***

const toolbar = quill.getModule('toolbar');
toolbar.addHandler('table', () => console.log("table"));

const insertTable = document.querySelector('.ql-table');
insertTable.addEventListener('click', () => {
  let range = quill.getSelection();
  if (range) {
    quill.insertText(range.index, 'table');
  }
});


***mapping the format options to a <div> tool bar***


<select className="ql-size">
{
  headings.map((heading) => 
    <option value={heading[0]} key={heading[0]}>
      {heading[1]}
    </option>)
}
</select>

<span className="ql-formats">
{
formats.map((format) => 
  <button 
    className={`ql-${format[0]}`}
    value={format[1] ? format[1] : 'null'}
    key={format[1] ? format[1] : format[0]}>
  </button>
)
} 
</span> 

const headings = [
  ['null', 'Body'], 
  ['large', 'Heading'], 
  ['huge', 'Title']
];

const formats = 
[
  ['background'], ['bold'], ['italic'], ['underline'], ['link'], ['blockquote'],
  ['code'], ['code-block'], ['formula'], ['image'],
  ['list', 'ordered'], ['list', 'bullet'], 
  ['ql-direction', 'rtl']
];

